name: 2. Configure And Create Projects
on:
  workflow_dispatch:
    inputs:
      PROJECT_CODE:
        description: 'Project Code: (Example: demo)'
        required: true
        default: ""
        type: text

jobs: 
#  call-workflow-passing-data:
#    name: 'Calling the external workflows to configure and create the project'
#    uses: ES-BAR-MEV/IDM-IAC-DYNAMIC-EPHEMERAL-${{ github.event.inputs.PROJECT_CODE }}-k8s/.github/workflows/called-workflow.yml@main
#    with:
#      PROJECT_CODE: ${{ github.event.inputs.PROJECT_CODE }}

#  call-workflow-passing-data:
#    runs-on: ubuntu-latest
#    container:
#      env:
#        repo: github.event.inputs.PROJECT_CODE
#    steps:
#      - name: Call action
#        uses: ES-BAR-MEV/IDM-IAC-DYNAMIC-EPHEMERAL-${{ env.repo }}-k8s/.github/workflows/called-workflow.yml@main

  Test-Run:
    runs-on: ubuntu-latest
    container:
      image: image_name
      env:
        DYNAMIC_ACTION: ./.dynamic-action
        LANG: en_US.utf8
    steps:
      - name: prepare composite action
        uses: actions/github-script@v6
        with:
          script: |
            const path = require('path');
            const fs = require('fs/promises');
            const dyn = '${{ env.DYNAMIC_ACTION }}';
            const action = {
              runs: {
                using: 'composite',
                steps: [
                  {
                    // clean up dynamically created action
                    name: 'Cleanup',
                    uses: `actions/github-script@${{ github.action_ref }}`,
                    with: {
                      script: `await io.rmRF('${dyn}')`
                    }
                  },
                  {
                    name: `Call action forXX`,
                    uses: `${{ github.event.inputs.PROJECT_CODE }}/.github/actions/some_action/action.yml`
                  }
                ]
              }
            };
            const content = JSON.stringify(action);
            core.debug(`Writing action:\n${content}\n`);
            await io.mkdirP(dyn);
            await fs.writeFile(path.join(dyn, 'action.yml'), content);

      - name: Call wrapper action
        uses: ./.dynamic-action
