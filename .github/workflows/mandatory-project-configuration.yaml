name: 'MANDATORY PROJECT CONFIGURATION PIPELINE'

on:
  workflow_dispatch:
    inputs:
      PROJECT_CODE:
        description: 'Project Code: (Example: demo)'
        required: true
        default: ""
        type: text
      VNET_SUPERNET:
        description: 'Randge IP CIDR for supernet'
        required: true
        default: ""
        type: text
      SUBNETS_COMMON_IP:
        description: 'Subnets common IP'
        required: false
        default: ""
        type: text
        
jobs:
  check-if-configured:
    name: Check if project configuration is done
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.early.conclusion }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Checking cfg-applied.txt file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files:  'cfg-applied.txt'
      - name: Configuration is done
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "THE PROJECT IS CURRENTLY CONFIGURED"
          exit 1
          
  format_prj_coode:
    needs: [check-if-configured]
    outputs:
      prj_code_lower: ${{ steps.var.outputs.prj_code_lower}}
      prj_code_upper: ${{ steps.var.outputs.prj_code_upper}}
    runs-on: "ubuntu-latest"
    steps:
      - name: Setting prj code to lower
        uses: actions/github-script@v6
        id: var
        with:
          script: |
            core.setOutput('prj_code_lower', '${{github.event.inputs.PROJECT_CODE }}'.toLowerCase().replaceAll(/[/.]/g, '-').trim('-'));
            core.setOutput('prj_code_upper', '${{github.event.inputs.PROJECT_CODE }}'.toUpperCase().replaceAll(/[/.]/g, '-').trim('-'));     

  configure-project:
    needs: [format_prj_coode]
    name: 'Configure project'
    runs-on: ubuntu-latest
    env:
      PROJECT_CODE_LOWERCASE: ${{ needs.format_prj_coode.outputs.prj_code_lower }}
      PROJECT_CODE_UPPERCASE: ${{ needs.format_prj_coode.outputs.prj_code_upper }}
    
    steps:
    - name: Echo variables 
      run: |
         echo ${{ env.PROJECT_CODE_LOWERCASE}}
         echo ${{ env.PROJECT_CODE_UPPERCASE}}
        
    # Checkout the repository to the GitHub Actions runner
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.DYNAMICEPHEMERAL_WORKFLOW_TOKEN }}
          
    # Replace variables
    - name: Inject variables
      run: |
        sed -i "s#VAR_TEMPLATE_PROJECT_CODE_LOWERCASE#${{ env.PROJECT_CODE_LOWERCASE}}#g" backend_config.hcl
        sed -i "s#VAR_TEMPLATE_PROJECT_CODE_LOWERCASE#${{ env.PROJECT_CODE_LOWERCASE}}#g" terraform.tfvars.json
        sed -i "s#VAR_TEMPLATE_VNET_SUPERNET#${{ github.event.inputs.VNET_SUPERNET }}#g" terraform.tfvars.json
        sed -i "s#VAR_TEMPLATE_SUBNETS_COMMON_IP#${{ github.event.inputs.SUBNETS_COMMON_IP }}#g" terraform.tfvars.json

    - name: Commit and push changes
      run: |
        git config --global user.name "Configure Project"
        git config --global user.email "configure.project@atos.net"
        git add -A
        git commit -m "VARIABLE REPLACAMENT BY MANDATORY PROJECT CONFIGURATION PIPELINE"
        git push

    - name: update file and push to remote
      run: |
        echo "CONFIGURATION APPLIED. DO NOT DELETE THIS FILE" >> cfg-applied.txt
        git config --global user.name "Configure Project"
        git config --global user.email "configure.project@atos.net"
        git add -A
        git commit -m "Confirmation of project configuration"
        git push
