name: Test
on:
  workflow_dispatch:

jobs: 
  array_file_names:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          echo "value=[\"params/01_params.env\",\"params/02_params.env\",\"params/03_params.env\",\"params/04_params.env\",\"params/05_params.env\",\"params/06_params.env\",\"params/07_params.env\",\"params/08_params.env\",\"params/09_params.env\",\"params/10_params.env\",]" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.matrix.outputs.value }}"
  define_next_parameter_file:
    needs: [ array_file_names ]
    runs-on: ubuntu-latest
    outputs:
      thefile: ${{ step.file_exists.outputs.value }}
    strategy:
      matrix:
        value: ${{fromJSON(needs.array_file_names.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Checking file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files:  '${{ matrix.value }}'
      - name: File does not exists
        if: steps.check_files.outputs.files_exists != 'true'
        run: |
          echo "FILE DOES NOT EXISTS"
      - name: File exists
        id: file_exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "value=${{ matrix.value }}" >> $GITHUB_OUTPUT
  print:
    needs: [ define_next_parameter_file ]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "${{ needs.define_next_parameter_file.outputs.thefile }}"


  setup_parameters:
    needs: [ define_next_parameter_file ]
    runs-on: ubuntu-latest
    env:
      PROJECT_CODE_LOWERCASE: jrq
      PROJECT_CODE_UPPERCASE: JRQ
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DYNAMICEPHEMERAL_WORKFLOW_TOKEN }}
      - uses: nearform-actions/github-action-copy-files@v1.2.2
        with:
          source: "${{ needs.build.outputs.thefile }}"
          destination: "."
          options: |
            {
              "overwrite": true,
              "flat": false,
              "rename": "${{ env.PROJECT_CODE_UPPERCASE}}_params.env"
            }
      - name: Push to remote
        run: |
          git config --global user.name "Configure Project"
          git config --global user.email "configure.project@atos.net"
          git add -A
          git commit -m "Generation parameters file"
          git push
            

  load-env-vars:
    name: 'Load env vars'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Load from file
      uses: cardinalby/export-env-action@v1
      with:
        envFile: 'params/01_params.env'
        expand: 'true'
    - name: Check noExport result
      run: |
        echo "env.PROJECT_CODE: '${{env.PROJECT_CODE}}'" 
        echo "env.VNET_SUPERNET: '${{env.VNET_SUPERNET}}'" 
        echo "env.SUBNETS_COMMON_IP: '${{env.SUBNETS_COMMON_IP}}'" 
        echo "env.SUBNETS_APPGW_IP: '${{env.SUBNETS_APPGW_IP}}'" 
        echo "env.SUBNETS_APPGW_PRIVATE_IP_ADDRESS: '${{env.SUBNETS_APPGW_PRIVATE_IP_ADDRESS}}'" 
        echo "env.SUBNETS_AKS_NODE_IP: '${{env.SUBNETS_AKS_NODE_IP}}'" 
        echo "env.NSGS_APPGW_DESTINATION_ADDRESS_PREFIX: '${{env.NSGS_APPGW_DESTINATION_ADDRESS_PREFIX}}'" 
        echo "env.APPGW_LISTENERS_WILDCARD_BACKENDSIPS: '${{env.APPGW_LISTENERS_WILDCARD_BACKENDSIPS}}'" 
        echo "env.LOAD_BALANCER_IP: '${{env.LOAD_BALANCER_IP}}'" 
        echo "env.KEYCLOAK_ARGOCD_CLIENT_SECRET: '${{env.KEYCLOAK_ARGOCD_CLIENT_SECRET}}'" 
        echo "env.CREATE_MSSQL_DB: '${{env.CREATE_MSSQL_DB}}'" 
        echo "env.DB_ADMIN_PWD: '${{env.DB_ADMIN_PWD}}'" 
